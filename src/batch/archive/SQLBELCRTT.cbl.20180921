      $SET SQL(dbman=ODBC, TARGETDB=MSSQLSERVER, NOAUTOCOMMIT)
      *****************************************************************
      *                                                               *
      * Copyright (c) 2015 by Central States Health and Life          *
      * All rights reserved.                                          *
      *                                                               *
      *****************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. SQLBELCRTT.
       AUTHOR.   Cowtown.
      
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
      
           SELECT ELCRTT           ASSIGN TO ELCRTT
                                   ORGANIZATION IS INDEXED
                                   ACCESS IS DYNAMIC
                                   RECORD KEY IS CS-CONTROL-primary
                                   FILE STATUS IS ELCRTT-FILE-STATUS.
      
           SELECT DISK-DATE        ASSIGN TO SYS019.
      
       DATA DIVISION.
       FILE SECTION.
      
       FD  ELCRTT.
      
                                       copy ElCCRTT.
      
       FD  DISK-DATE
                                       COPY ELCDTEFD.
      
       working-storage section.
      
       EXEC SQL
          INCLUDE SQLDA
       END-EXEC
      
       EXEC SQL
          INCLUDE SQLCA
       END-EXEC
      
       77  s1                          pic s999 comp-3 value +0.
       77  rec-cnt                     pic 9(9) value zeros.
       77  ws-recs-in                  pic 9(7) value zeros.
       77  ws-sql-code                 pic s9(7) value zeros.
       77  ws-dis-sql-code             pic -9999999 value zeros.
       77  elcrtt-file-status          pic xx value low-values.
       77  eof-sw                      pic x value ' '.
           88  end-of-input               value 'Y'.
      
       01  P pointer.
       01  KIXSYS                      pic X(7)  VALUE Z"KIXSYS".
       01  var-ptr pointer.
       01  env-var-len                 pic 9(4)  binary.
       01  rc                          pic 9(9)  binary.
      
       01  WS-KIXSYS.
           05  WS-KIX-FIL1             PIC X(10).
           05  WS-KIX-APPS             PIC X(10).
           05  WS-KIX-ENV              PIC X(10).
           05  WS-KIX-MYENV            PIC X(10).
           05  WS-KIX-SYS              PIC X(10).
      
       01  filler.
           05  ws-work-date.
               10  ws-work-ccyy        pic 9999.
               10  ws-work-mm          pic 99.
               10  ws-work-dd          pic 99.
           05  ws-work-date-moyr       pic 9999  comp value zeros.
      
       EXEC SQL
          BEGIN DECLARE SECTION
       END-EXEC
      
       01  sqlcmd                      pic x(1024).
       01  WS-MOE-DATE                 pic x(10).
       01  svr                         pic x(32).
       01  usr                         pic x(32).
       01  pass                        pic x(32).
       01  usr-pass                    pic x(64).
       01  ws-disp-code                pic s9(11).
      
      ***-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_***
      ***                                                            ***
      ***  These indicators are used to tell sql server that i am    ***
      ***  passing it a null value.  The indicator will be -1        ***
      ***  if the value is nulls and +0 if the value is other than   ***
      ***  nulls.  Here is a sample on how to use it.                ***
      ***                                                            ***
      ***      if db-date1 = spaces move -1 to nu-date1 end-if       *** 
      ***     EXEC SQL                                               ***
      ***        insert into ELCRTT (                                ***
      ***           date1,                                           ***
      ***           date2)                                           ***
      ***        values (                                            ***
      ***           :db-date1      :nu-date1,                        ***
      ***           :db-date2      :nu-date2)                        ***
      ***     END-EXEC                                               ***
      ***                                                            ***
      ***_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-***
      
       01  indicator-vaiables-for-nulls.
           05  NU-VEHICLE-ID-NO        PIC s9(4) comp value +0.
           05  NU-AGENT-NAME           PIC s9(4) comp value +0.
           05  NU-LICENSE-NO           pic s9(4) comp value +0.
           05  NU-NATIONAL-PRODUCER-NO PIC s9(4) comp value +0.
           05  NU-AGT-SIG-VER-STATUS   PIC s9(4) comp value +0.

       01  ELCRTT-TABLE-NAME           PIC X(10) VALUE SPACES.

       01  ELCRTT-TABLE-RECORD.
           05  TB-CARRIER              PIC X.
           05  TB-GROUPING             PIC X(6).
           05  TB-STATE                PIC XX.
           05  TB-ACCOUNT              PIC X(10).
           05  TB-CERT-EFF-DT          PIC X(10).
           05  TB-CERT-NO              PIC X(11).
           05  TB-VEHICLE-ID-NO        PIC X(20).
           05  tb-year                 pic 9999.
           05  tb-make                 pic x(20).
           05  tb-model                pic x(20).
           05  tb-series               pic x(20).
           05  tb-odometer             pic 9(7).
           05  TB-AGENT-NAME           PIC X(50).
           05  TB-LICENSE-NO           PIC X(15).
           05  TB-NATIONAL-PRODUCER-NO PIC X(10).
           05  TB-AGT-SIG-VER-STATUS   PIC X.
      
       EXEC SQL
          END DECLARE SECTION
       END-EXEC
      
       01  FILLER.
           05  ABEND-CODE              PIC X(4)  VALUE SPACES.
           05  ABEND-OPTION            PIC X     VALUE 'Y'.
           05  WS-ABEND-MESSAGE        PIC X(80) VALUE SPACES.
           05  WS-ABEND-FILE-STATUS    PIC XX    VALUE ZERO.
           05  WS-RETURN-CODE          PIC S9(3) VALUE ZERO COMP-3.
           05  PGM-SUB                 PIC S999  VALUE +344 COMP-3.
      
                                       COPY ELCDTECX.
                                       copy ELCDTEVR.
                                       COPY ELCDATE.
      
       LINKAGE SECTION.                                                 

       01  var  pic x(30).
      
       procedure division.
                                       COPY ELCDTERX.
       0000-begin.

           display ' Begin Program SQLBELCRTT '

           perform 0010-init           thru 0010-exit
           perform 2000-connect-to-logic
                                       thru 2000-exit

      *    perform 1010-drop-table     thru 1010-exit
           perform 1020-truncate-table thru 1020-exit
      
      *    perform 1000-create-table   thru 1000-exit
      
           perform 0020-open-files     thru 0020-exit
      
           EXEC SQL
              SET AUTOCOMMIT OFF
           END-EXEC
      
           perform 0030-start-input    thru 0030-exit
           perform 0046-read-input     thru 0046-exit
           display ' About to Populate table '
           perform 0045-process-input  thru 0045-exit until
              end-of-input
      *      or ws-recs-in > 10000
      
           perform 0060-finish-up      thru 0060-exit
           close ELCRTT
           display ' End Program '
           display ' rows inserted ' rec-cnt
           display ' records read  ' ws-recs-in
           goback
      
           .
       0010-init.

           set P to address of KIXSYS
           CALL "getenv" using by value P returning var-ptr
           if var-ptr = null then
              display ' kixsys not set '
           else
              set address of var to var-ptr
              move 0 to env-var-len
              inspect var tallying env-var-len
                for characters before X'00' 
              unstring var (1:env-var-len) delimited by '/'
                 into WS-KIX-FIL1 WS-KIX-APPS WS-KIX-ENV WS-KIX-MYENV
                    WS-KIX-SYS
              end-unstring
           end-if
      
           display ' KIXSYS  ' ws-kix-myenv

           evaluate dte-client
              when 'DCC'
                 move 'DCC_ELCRTT'     to elcrtt-table-name
              when 'VPP'
                 move 'VPP_ELCRTT'     to elcrtt-table-name
              when 'CID'
                 move 'ELCRTT'         to elcrtt-table-name
              when other
                 string
                    dte-client  '_'
                    'ELCRTT'
                   delimited by size into elcrtt-table-name
                 end-string
           end-evaluate

           .
       0010-exit.
           exit.
      
       0020-open-files.
      
           open input ELCRTT
           if ELCRTT-file-status not = '00'
              display ' error-ELCRTT-open ' ELCRTT-file-status
              perform abend-pgm
           end-if
      
           .
       0020-exit.
           exit.
      
       0030-start-input.

           display ' made it to 0030 '

           move low-values             to cs-control-primary
           move dte-clasic-company-cd  to cs-company-cd
           start ELCRTT key >= cs-control-primary
           if ELCRTT-file-status = '10' or '23'
              set end-of-input to true
           else
              if ELCRTT-file-status not = '00'
                 display ' error-ELCRTT-start ' ELCRTT-file-status
                 perform abend-pgm
              end-if
           end-if
      
           .
       0030-exit.
           exit.
      
       0045-process-input.
      
      *    display ' made it to 0045 '

           if cs-trailer-type = 'C'
              perform 0050-insert-row  thru 0050-exit
           end-if

           perform 0046-read-input     thru 0046-exit
      
           .
       0045-exit.
           exit.
      
       0046-read-input.
      
      *    display ' made it to 0046 '

           read ELCRTT next record
           if (elcrtt-file-status = '10' or '23')
              or (dte-clasic-company-cd not = cs-company-cd)
              set end-of-input to true
           else
              if elcrtt-file-status not = '00'
                 display ' error-ELCRTT-read ' ELCRTT-file-status
                 perform abend-pgm
              end-if
           end-if
      
           .
       0046-exit.
           exit.
      
       0050-insert-row.
      
           perform 0052-build-values   thru 0052-exit
           if tb-vehicle-id-no = spaces
              and tb-agent-name = spaces
              and tb-license-no = spaces
              and tb-national-producer-no = spaces
              and tb-agt-sig-ver-status = spaces
              continue
           else
              perform 0057-insert-row  thru 0057-exit
           end-if
      
           .
       0050-exit.
           exit.
      
       0052-build-values.

           move spaces                 to elcrtt-table-record
           move cs-carrier             to tb-carrier
           move cs-grouping            to tb-grouping
           move cs-state               to tb-state
           move cs-account             to tb-account

           move cs-cert-eff-dt         to dc-bin-date-1
           move ' '                    to dc-option-code
           PERFORM 8500-DATE-CONVERT   THRU 8590-EXIT
           if no-conversion-error
              move dc-greg-date-b-edit to tb-cert-eff-dt
           end-if

           move cs-cert-no             to tb-cert-no
           move cs-vin-number          to tb-vehicle-id-no
           if cs-year not numeric
              move zeros               to cs-year
           end-if
           if cs-vehicle-odometer not numeric
              move zeros               to cs-vehicle-odometer
           end-if
           move cs-year                to tb-year
           move cs-make                to tb-make
           move cs-model               to tb-model
           move cs-future              to tb-series
           move cs-vehicle-odometer    to tb-odometer

           if cs-agent-edit-status = 'U' or 'N' or 'R'
              move cs-agent-name       to tb-agent-name
           else
              string
                 cs-agent-fname ' '
                 cs-agent-mi    ' '
                 cs-agent-lname ' '
                 delimited by '  ' into tb-agent-name
              end-string
           end-if

           move cs-license-no          to tb-license-no
           move cs-npn-number          to tb-national-producer-no
           move cs-agent-edit-status   to tb-agt-sig-ver-status

           .
       0052-exit.
           exit.
      
       0057-insert-row.

           if tb-vehicle-id-no = spaces
              move -1                  to nu-vehicle-id-no
           else
              move +0                  to nu-vehicle-id-no
           end-if

           if tb-agent-name = spaces
              move -1                  to nu-agent-name
           else
              move +0                  to nu-agent-name
           end-if

           if tb-license-no = spaces
              move -1                  to nu-license-no
           else
              move +0                  to nu-license-no
           end-if

           if tb-national-producer-no = spaces
              move -1                  to nu-national-producer-no
           else
              move +0                  to nu-national-producer-no
           end-if

           if tb-agt-sig-ver-status = spaces
              move -1                  to nu-agt-sig-ver-status
           else
              move +0                  to nu-agt-sig-ver-status
           end-if

           evaluate dte-client
            when 'DCC'
              EXEC SQL
                 insert into DCC_ELCRTT (
                   CARRIER               ,
                   GROUPING              ,
                   STATE                 ,
                   ACCOUNT               ,
                   EFF_DATE              ,
                   CERT_NO               ,
                   VEHICLE_ID_NO         ,
                   VEHICLE_YEAR          ,
                   VEHICLE_MAKE          ,
                   MODEL_NAME            ,
                   SERIES_NAME           ,
                   ODOMETER_READING      ,
                   AGENT_NAME            ,
                   AGT_LICENSE_NO        ,
                   AGT_NATL_PRODUCER_NO  ,
                   AGT_SIG_VERIFY_STATUS)
                 values (
                     :TB-CARRIER              ,
                     :TB-GROUPING             ,
                     :TB-STATE                ,
                     :TB-ACCOUNT              ,
                     :TB-CERT-EFF-DT          ,
                     :TB-CERT-NO              ,
                     :TB-VEHICLE-ID-NO :NU-VEHICLE-ID-NO,
                     :TB-YEAR                 ,
                     :TB-MAKE                 ,
                     :TB-MODEL                ,
                     :TB-SERIES               ,
                     :TB-ODOMETER             ,
                     :TB-AGENT-NAME    :NU-AGENT-NAME,
                     :TB-LICENSE-NO    :NU-LICENSE-NO,
                     :TB-NATIONAL-PRODUCER-NO :NU-NATIONAL-PRODUCER-NO,
                     :TB-AGT-SIG-VER-STATUS :NU-AGT-SIG-VER-STATUS)
              end-exec
            when 'CID'
              EXEC SQL
                 insert into ELCRTT (
                   CARRIER               ,
                   GROUPING              ,
                   STATE                 ,
                   ACCOUNT               ,
                   EFF_DATE              ,
                   CERT_NO               ,
                   VEHICLE_ID_NO         ,
                   VEHICLE_YEAR          ,
                   VEHICLE_MAKE          ,
                   MODEL_NAME            ,
                   SERIES_NAME           ,
                   ODOMETER_READING      ,
                   AGENT_NAME            ,
                   AGT_LICENSE_NO        ,
                   AGT_NATL_PRODUCER_NO  ,
                   AGT_SIG_VERIFY_STATUS)
                 values (
                     :TB-CARRIER              ,
                     :TB-GROUPING             ,
                     :TB-STATE                ,
                     :TB-ACCOUNT              ,
                     :TB-CERT-EFF-DT          ,
                     :TB-CERT-NO              ,
                     :TB-VEHICLE-ID-NO :NU-VEHICLE-ID-NO,
                     :TB-YEAR                 ,
                     :TB-MAKE                 ,
                     :TB-MODEL                ,
                     :TB-SERIES               ,
                     :TB-ODOMETER             ,
                     :TB-AGENT-NAME    :NU-AGENT-NAME,
                     :TB-LICENSE-NO    :NU-LICENSE-NO,
                     :TB-NATIONAL-PRODUCER-NO :NU-NATIONAL-PRODUCER-NO,
                     :TB-AGT-SIG-VER-STATUS :NU-AGT-SIG-VER-STATUS)
              end-exec
            when 'VPP'
              EXEC SQL
                 insert into VPP_ELCRTT (
                   CARRIER               ,
                   GROUPING              ,
                   STATE                 ,
                   ACCOUNT               ,
                   EFF_DATE              ,
                   CERT_NO               ,
                   VEHICLE_ID_NO         ,
                   VEHICLE_YEAR          ,
                   VEHICLE_MAKE          ,
                   MODEL_NAME            ,
                   SERIES_NAME           ,
                   ODOMETER_READING      ,
                   AGENT_NAME            ,
                   AGT_LICENSE_NO        ,
                   AGT_NATL_PRODUCER_NO  ,
                   AGT_SIG_VERIFY_STATUS)
                 values (
                     :TB-CARRIER              ,
                     :TB-GROUPING             ,
                     :TB-STATE                ,
                     :TB-ACCOUNT              ,
                     :TB-CERT-EFF-DT          ,
                     :TB-CERT-NO              ,
                     :TB-VEHICLE-ID-NO :NU-VEHICLE-ID-NO,
                     :TB-YEAR                 ,
                     :TB-MAKE                 ,
                     :TB-MODEL                ,
                     :TB-SERIES               ,
                     :TB-ODOMETER             ,
                     :TB-AGENT-NAME    :NU-AGENT-NAME,
                     :TB-LICENSE-NO    :NU-LICENSE-NO,
                     :TB-NATIONAL-PRODUCER-NO :NU-NATIONAL-PRODUCER-NO,
                     :TB-AGT-SIG-VER-STATUS :NU-AGT-SIG-VER-STATUS)
              end-exec
           end-evaluate
      
           if sqlcode not = 0
              display "Error: cannot insert row "
              move sqlcode             to ws-sql-code
              move ws-sql-code         to ws-dis-sql-code
              display ' sqlcode ' ws-dis-sql-code
              display ' sql err mess    ' sqlerrmc
              display ' in out cnt ' ws-recs-in ' ' rec-cnt
              display ' offending rec ' ELCRTT-table-record
           else
              add 1 to rec-cnt
           end-if
      
           .
       0057-exit.
           exit.
      
       0060-finish-up.
      
           EXEC SQL
               commit work release
           END-EXEC
      
           if sqlcode not = 0
              display "Error: commit work release "
              display ' sql return code ' sqlcode
              display ' sql err mess    ' sqlerrmc
           end-if
      
           EXEC SQL
              DISCONNECT
           END-EXEC
      
           if sqlcode not = 0
              display "Error: disconnect  "
              display ' sql return code ' sqlcode
              display ' sql err mess    ' sqlerrmc
           end-if
      
           .
       0060-exit.
           exit.
      
       1000-create-table.

           display ' Begin Create table '

           if dte-client = 'DCC'
              EXEC SQL
                 create table DCC_ELCRTT (
                   CARRIER               CHAR(1) NOT NULL
                  ,GROUPING              CHAR(6) NOT NULL
                  ,STATE                 CHAR(2) NOT NULL
                  ,ACCOUNT               CHAR(10) NOT NULL
                  ,EFF_DATE              datetime NOT null
                  ,CERT_NO               CHAR(11) NOT NULL
                  ,VEHICLE_ID_NO         CHAR(20)
                  ,VEHICLE_YEAR          int
                  ,VEHICLE_MAKE          CHAR(20)
                  ,MODEL_NAME            CHAR(20)
                  ,SERIES_NAME           CHAR(20)
                  ,ODOMETER_READING      INT
                  ,AGENT_NAME            CHAR(50)
                  ,AGT_LICENSE_NO        CHAR(15)
                  ,AGT_NATL_PRODUCER_NO  CHAR(10)
                  ,AGT_SIG_VERIFY_STATUS CHAR(1)
                    CONSTRAINT PK_DCC_ELCRTT PRIMARY KEY CLUSTERED
                      (CARRIER, GROUPING, STATE, ACCOUNT,
                       EFF_DATE, CERT_NO)
                	   )
              END-EXEC
           ELSE
              EXEC SQL
                 create table ELCRTT (
                   CARRIER               CHAR(1) NOT NULL
                  ,GROUPING              CHAR(6) NOT NULL
                  ,STATE                 CHAR(2) NOT NULL
                  ,ACCOUNT               CHAR(10) NOT NULL
                  ,EFF_DATE              datetime NOT null
                  ,CERT_NO               CHAR(11) NOT NULL
                  ,VEHICLE_ID_NO         CHAR(20)
                  ,VEHICLE_YEAR          int
                  ,VEHICLE_MAKE          CHAR(20)
                  ,MODEL_NAME            CHAR(20)
                  ,SERIES_NAME           CHAR(20)
                  ,ODOMETER_READING      INT
                  ,AGENT_NAME            CHAR(50)
                  ,AGT_LICENSE_NO        CHAR(15)
                  ,AGT_NATL_PRODUCER_NO  CHAR(10)
                  ,AGT_SIG_VERIFY_STATUS CHAR(1)
                    CONSTRAINT PK_ELCRTT PRIMARY KEY CLUSTERED
                      (CARRIER, GROUPING, STATE, ACCOUNT,
                       EFF_DATE, CERT_NO)
                	   )
              END-EXEC
           end-if
      
           if sqlcode not = 0
              display "Error: cannot create table "
              move sqlcode             to ws-disp-code
              display ' sql return code ' ws-disp-code
              display ' sql err mess    ' sqlerrmc
              goback
           end-if
      
           .
       1000-exit.
           exit.
      
       1010-drop-table.
      
           display 'Begin Drop table'

           if dte-client = 'DCC'
              EXEC SQL
                 drop table DCC_ELCRTT
              END-EXEC
           else
              EXEC SQL
                 drop table ELCRTT
              END-EXEC
           end-if

           if sqlcode not = 0
              display "Error(anticipated) : cannot drop table "
              move sqlcode             to ws-sql-code
              move ws-sql-code         to ws-dis-sql-code
              display ' sqlcode ' ws-dis-sql-code
              display ' message ' sqlerrmc
           end-if
      
           .
       1010-exit.
           exit.
      
       1020-truncate-table.
      
           display 'Begin Truncate table'

           evaluate dte-client
            when 'DCC'
              EXEC SQL
                 truncate table DCC_ELCRTT
              END-EXEC
            when 'CID'
              EXEC SQL
                 truncate table ELCRTT
              END-EXEC
            when 'VPP'
              EXEC SQL
                 truncate table VPP_ELCRTT
              END-EXEC
           end-evaluate
          
      
           if sqlcode not = 0
              display "Error : cannot truncate table "
              move sqlcode             to ws-sql-code
              move ws-sql-code         to ws-dis-sql-code
              display ' sqlcode ' ws-dis-sql-code
              display ' message ' sqlerrmc
           end-if
      
           .
       1020-exit.
           exit.
      
       2000-connect-to-logic.
      
           display ' about to connect to Logic '
      
           move 'NTSQLTST2_Logic'      to svr
           move 'sa'                   to usr
           move 'sql2008r2'            to pass
      
           if ws-kix-myenv = 'cid1p'
              move 'NTCSO2_Logic'      to svr
              move 'sa'                to usr
              move 'ntcso2'            to pass
           end-if
      
           string
               usr delimited space
               "." delimited size
               pass delimited space into usr-pass
           end-string
      
           EXEC SQL
              SET OPTION logintime 5
           END-EXEC
      
           EXEC SQL
              CONNECT TO :svr
                    USER :usr-pass
           END-EXEC
      
           if sqlcode not = 0
              display "Error: cannot connect to Logic"
              move sqlcode             to ws-sql-code
              move ws-sql-code         to ws-dis-sql-code
              display ' sqlcode ' ws-dis-sql-code
              display sqlerrmc
              perform abend-pgm
           end-if
      
           .
       2000-exit.
           exit.
      
       8500-DATE-CONVERT.              
                                       COPY ELCDCS.
      
       abend-pgm.
      
            call 'ABORTME'.
            
            goback.
